// Copyright 2021 - 2022 Matrix Origin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package function

import (
	"github.com/matrixorigin/matrixone/pkg/container/types"
	"github.com/matrixorigin/matrixone/pkg/pb/plan"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/extend2/builtin/binaryfunc"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/extend2/builtin/multifunc"
	"github.com/matrixorigin/matrixone/pkg/sql/plan2/function/extend2/builtin/unaryfunc"
)

func initBuiltIns() {
	var err error

	for name, fs := range builtins {
		for _, f := range fs {
			err = appendFunction(name, f)
			if err != nil {
				panic(err)
			}
		}
	}
}

// builtins contains the builtin function indexed by function id.
var builtins = map[int][]Function{
	EXTRACT: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_date},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_datetime},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	YEAR: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DateToYear,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DatetimeToYear,
		},
	},
	WEEKDAY: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DateToWeekday,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DatetimeToWeekday,
		},
	},
	SUBSTRING: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_char,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	DATE_ADD: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	DATE_SUB: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date, types.T_int64, types.T_int64},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          nil,
		},
	},
	OCT: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Oct[int64],
		},
	},
	SIN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Sin[float64],
		},
	},
	EXP: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Exp[float64],
		},
	},
	LN: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[float64],
		},
	},
	LOG: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint8],
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint16],
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[uint64],
		},
		{
			Index:       4,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int8},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int8],
		},
		{
			Index:       5,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int16},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int16],
		},
		{
			Index:       6,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int32],
		},
		{
			Index:       7,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[int64],
		},
		{
			Index:       8,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[float32],
		},
		{
			Index:       9,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ln[float64],
		},
	},
	BIT_LENGTH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.BitLengthFunc,
		},
	},
	LENGTH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_int64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Length,
		},
	},
	LENGTH_UTF8: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Length,
		},
	},
	RTRIM: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Rtrim,
		},
	},
	REVERSE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Reverse,
		},
	},
	SPACE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_uint64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.SpaceUint64,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_int64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.SpaceInt64,
		},
		{
			Index:       2,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float32},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.SpaceFloat[float32],
		},
		{
			Index:       3,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64},
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.SpaceFloat[float64],
		},
	},
	LTRIM: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char}, // todo? check if there is implicit upcast for char/varchar, it not, register another type or add upcast
			ReturnTyp:   types.T_varchar,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Ltrim,
		},
	},
	DATE: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DateToDate,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_date,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DatetimeToDate,
		},
	},
	MONTH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DateToMonth,
		},
		{
			Index:       1,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_datetime},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DatetimeToMonth,
		},
	},
	DAYOFYEAR: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_date},
			ReturnTyp:   types.T_uint16,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.DayOfYear,
		},
	},
	EMPTY: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_char},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          unaryfunc.Empty,
		},
	},
	PI: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          multifunc.Pi,
		},
	},
	POW: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_float64, types.T_float64},
			ReturnTyp:   types.T_float64,
			TypeCheckFn: strictTypeCheck,
			Fn:          binaryfunc.Power,
		},
	},
	STARTSWITH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          binaryfunc.Startswith,
		},
	},
	UTC_TIMESTAMP: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{},
			ReturnTyp:   types.T_datetime,
			TypeCheckFn: strictTypeCheck,
			Fn:          multifunc.UTCTimestamp,
		},
	},
	ENDSWITH: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_uint8,
			TypeCheckFn: strictTypeCheck,
			Fn:          binaryfunc.Endswith,
		},
	},
	FINDINSET: {
		{
			Index:       0,
			Flag:        plan.Function_STRICT,
			Layout:      STANDARD_FUNCTION,
			Args:        []types.T{types.T_varchar, types.T_varchar},
			ReturnTyp:   types.T_uint64,
			TypeCheckFn: strictTypeCheck,
			Fn:          binaryfunc.FindInSet,
		},
	},
}
